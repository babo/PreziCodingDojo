// Generated by CoffeeScript 1.6.2
(function() {
  suite('Gilded Rose', function() {
    this.timeout(200);
    setup(function() {
      var _this = this;

      this.items = [
        {
          name: "Old sword",
          exipre: 10,
          quality: 5
        }, {
          name: "wooden armour",
          exipre: 5,
          quality: 2
        }
      ];
      assert.isDefined(Elm.GildedRose, "GildedRose is not defined!");
      this.worker = Elm.worker(Elm.GildedRose);
      this.requestInventory = function() {
        _this.inventory = null;
        return _this.worker.send("requestInventory", true);
      };
      this.checkInventory = function(lastCallback) {
        _this.lastCallback = lastCallback;
        return _this.requestInventory();
      };
      this.timePasses = function() {
        return this.worker.send("timePasses", true);
      };
      this.worker.recv("inventory", function(evt) {
        return typeof _this.lastCallback === "function" ? _this.lastCallback(evt.value) : void 0;
      });
      return this.worker.send("items", this.items);
    });
    test('There are the items in the store', function(done) {
      return this.checkInventory(function(inventory) {
        expect(inventory).to.exist;
        inventory.should.not.be.empty;
        return done();
      });
    });
    test('There are as many items in the store', function(done) {
      return this.checkInventory(function(inventory) {
        expect(inventory).to.exist;
        inventory.length.should.equal(this.items.length);
        return done();
      });
    });
    return test("Time shouldn't change the # of items", function(done) {
      var itemCount;

      itemCount = null;
      this.checkInventory(function(inventory) {
        return itemCount = inventory.length;
      });
      this.timePasses();
      return this.checkInventory(function(inventory) {
        inventory.length.should.equal(itemCount, "Number of items changes");
        return done();
      });
    });
  });

}).call(this);
